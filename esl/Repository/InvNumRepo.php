<?php
/**
 * Created by PhpStorm.
 * User: marvin
 * Date: 4/12/18
 * Time: 2:45 PM
 */

namespace Esl\Repository;


use App\BtnLine;
use App\InvNum;
use Carbon\Carbon;

class InvNumRepo
{
    public static function init()
    {
        return new self;
    }

    protected $inProforma;

    public function makeInvoice($invoiceData, $proforma = null)
    {
        $this->inProforma = $proforma;
//dd($invoiceData->quote->consignee);
          InvNum::create([
                     //dclink
                'AccountID' => $proforma != null ? $proforma->customer->DCLink : $invoiceData->customer->DCLink,
                'Address1' => $proforma != null ? $proforma->customer->Physical1 : $invoiceData->customer->Physical1,
                'Address2' => $proforma != null ? $proforma->customer->Physical2 : $invoiceData->customer->Physical2,
                'Address3' => $proforma != null ? $proforma->customer->Physical3 : $invoiceData->customer->Physical3,
                'Address4' => $proforma != null ? $proforma->customer->Physical4 : $invoiceData->customer->Physical4,
                'Address5' => $proforma != null ? $proforma->customer->Physical4 : $invoiceData->customer->Physical4,
                'Address6' => $proforma != null ? $proforma->customer->Physical5 : $invoiceData->customer->Physical5,
//            'DelMethodID',
                'DeliveryDate' => Carbon::now(),
//            'DeliveryNote',
              // 'Description' =>  $proforma != null ? $proforma->customer->Name.' invoice ' : $invoiceData->customer->Name . ' invoice ',
                 'Description' =>  $proforma != null ? $proforma->customer->Name : $invoiceData->customer->Name,
                'DocFlag' => 0,
                'DocRepID' => 0,
                'DocState' => 1,
                'DocType' => 0,
                'DocVersion' => 1,
                'DueDate' => Carbon::now(),
//            'Email_Sent',
//            'ExtOrderNum',
//                from client TODO:client iccurency id
            'ForeignCurrencyID' => $proforma != null ? $proforma->customer->iCurrencyID : $invoiceData->customer->iCurrencyID,
//            'GrvSplitFixedAmnt',
//            'GrvSplitFixedCost',
                'InvDate' => Carbon::now(),
//            'InvDisc',
//            'InvDiscAmnt',
//            'InvDiscAmntEx',
//            'InvDiscReasonID',
//            'InvNum_Checksum',
//            'InvNum_dCreatedDate',
//            'InvNum_dModifiedDate',
//            'InvNum_iBranchID',
//            'InvNum_iChangeSetID',
//            'InvNum_iCreatedAgentID',
//            'InvNum_iCreatedBranchID',
//            'InvNum_iModifiedAgentID',
//            'InvNum_iModifiedBranchID',
                'InvNumber' => 'INV00'.(InvNum::count()+1),
                //total invoice line
                'InvTotExcl' => $proforma != null ? $proforma->services->sum('total') :  $invoiceData->quote->services->sum('total'),
                'InvTotExclDEx' => $proforma != null ? $proforma->services->sum('total') :  $invoiceData->quote->services->sum('total'),
                'InvTotIncl' => 0,
                'InvTotInclDEx' => $proforma != null ? ($proforma->services->sum('total') + 0) : ($invoiceData->quote->services->sum('total') + 0),
                'InvTotInclExRounding' => $proforma != null ? $proforma->services->sum('total') : $invoiceData->quote->services->sum('total'),
//            'InvTotRounding',
                'InvTotTax' => 0,
                'InvTotTaxDEx' => 0,
//            'KeepAsideCollectionDate',
//            'KeepAsideExpiryDate',
//            'Message1',
//            'Message2',
//            'Message3',
//            'OrdDiscAmnt',
//            'OrdDiscAmntEx',
                'OrdTotExcl' => $proforma != null ? $proforma->services->sum('total') : $invoiceData->quote->services->sum('total'),
                'OrdTotExclDEx' => $proforma != null ? $proforma->services->sum('total') : $invoiceData->quote->services->sum('total'),
                'OrdTotIncl' => $proforma != null ? ($proforma->services->sum('total') + 0) :  ($invoiceData->quote->services->sum('total') + 0),
                'OrdTotInclDEx' => $proforma != null ? ($proforma->services->sum('total') + 0) :  ($invoiceData->quote->services->sum('total') + 0),
                'OrdTotInclExRounding' => $proforma != null ? $proforma->services->sum('total') : $invoiceData->quote->services->sum('total'),
//            'OrdTotRounding',
                'OrdTotTax' => 0,
                'OrdTotTaxDEx' => 0,
                'OrderDate' => Carbon::now(),
//            'OrderNum',
//            'OrderPriorityID',
//            'OrderStatusID',
                'OrigDocID' =>0,
                 'PAddress1' =>  $proforma != null ? $proforma->customer->Physical1 : $invoiceData->customer->Physical1,
                 'PAddress2' =>  $proforma != null ? $proforma->customer->Physical2 : $invoiceData->customer->Physical2,
                 'PAddress3' =>  $proforma != null ? $proforma->customer->Physical3 : $invoiceData->customer->Physical3,
                  'PAddress4' =>  $proforma != null ? $proforma->customer->Physical4 : $invoiceData->customer->Physical4,
                  'PAddress5' =>  $proforma != null ? $proforma->customer->Physical5 : $invoiceData->customer->Physical5,
                  'PAddress6'=>  $proforma != null ? $proforma->customer->Physical6 : $invoiceData->customer->Physical5,
//            'POSAmntTendered',
//            'POSChange',
                'ProjectID' => $invoiceData->quote->project_id,
                'TaxInclusive' => 0,
//            'TillID',
                'bInvRounding' => 1,
//            'bIsDCOrder',
//            'bLinkedTemplate',
                'bTaxPerLine' => 1,
//            'bUseFixedPrices',
                'cAccountName' =>  $proforma != null ? $proforma->customer->Name : $invoiceData->customer->Name,
//            'cAuthorisedBy',
//            'cCellular',
//            'cClaimNumber',
//            'cContact',
//            'cEmail',
//            'cExcessAccCont1',
//            'cExcessAccCont2',
//            'cExcessAccName',
//            'cFax',
//            'cGIVNumber',
//            'cPolicyNumber',
//            'cSettlementTermInvMsg',
//            client pin number
//            'cTaxNumber',
//            'cTelephone',
//            'dIncidentDate',
//            'fAddChargeExclusive',
//            'fAddChargeExclusiveForeign',
//            'fAddChargeInclusive',
//            'fAddChargeInclusiveForeign',
//            'fAddChargeTax',
//            'fAddChargeTaxForeign',
//            'fDepositAmountForeign',
//            'fDepositAmountNew',
//            'fDepositAmountTotal',
//            'fDepositAmountTotalForeign',
//            'fDepositAmountUnallocated',
//            'fDepositAmountUnallocatedForeign',
//            'fExcessAmt',
//            'fExcessExclusive',
//            'fExcessInclusive',
//            'fExcessPct',
//            'fExcessTax',
                'fExchangeRate' => 103,
//            'fGrvSplitFixedAmntForeign',
//            'fInvDiscAmntExForeign',
//            'fInvDiscAmntForeign',
                'fInvTotExclDExForeign' => $proforma != null ? $proforma->services->sum('total') : $invoiceData->quote->services->sum('total'),
                'fInvTotExclForeign' => $proforma != null ? $proforma->services->sum('total') : $invoiceData->quote->services->sum('total'),
//            'fInvTotForeignRounding',
                'fInvTotInclDExForeign' => $proforma != null ? ($proforma->services->sum('total') + 0) : ($invoiceData->quote->services->sum('total') + 0),
                'fInvTotInclForeign' => $proforma != null ? ($proforma->services->sum('total') + 0) : ($invoiceData->quote->services->sum('total') + 0),
//            'fInvTotInclForeignExRounding',
                'fInvTotTaxDExForeign' => 0,
                'fInvTotTaxForeign' => 0,
//            'fOrdAddChargeExclusive',
//            'fOrdAddChargeExclusiveForeign',
//            'fOrdAddChargeInclusive',
//            'fOrdAddChargeInclusiveForeign',
//            'fOrdAddChargeTax',
//            'fOrdAddChargeTaxForeign',
//            'fOrdDiscAmntExForeign',
//            'fOrdDiscAmntForeign',
                'fOrdTotExclDExForeign' => $proforma != null ? $proforma->services->sum('total') : $invoiceData->quote->services->sum('total'),
                'fOrdTotExclForeign' => $proforma != null ? $proforma->services->sum('total') : $invoiceData->quote->services->sum('total'),
//            'fOrdTotForeignRounding',
                'fOrdTotInclDExForeign' => $proforma != null ? ($proforma->services->sum('total') + 0) : ($invoiceData->quote->services->sum('total') + 0),
                'fOrdTotInclForeign' => $proforma != null ? ($proforma->services->sum('total') + 0) : ($invoiceData->quote->services->sum('total') + 0),
//            'fOrdTotInclForeignExRounding',
                'fOrdTotTaxDExForeign' => 0,
                'fOrdTotTaxForeign' => 0,
//            'fRefundAmount',
//            'fRefundAmountForeign',
//            'iDCBranchID',
//            'iDocEmailed',
//            'iDocPrinted',
//            'iEUNoTCID',
                'iINVNUMAgentID' => 1,
//            'iInsuranceState',
//            'iInvSettlementTermsID',
//            'iInvoiceSplitDocID',
//            'iLinkedDocID',
//            'iMergedDocID',
//            'iOpportunityID',
//            'iOrderCancelReasonID',
//            'iPOAuthStatus',
//            'iPOIncidentID',
//            'iProspectID',
//            'iSalesBranchID',
//            'iSupervisorID',
//            'imgOrderSignature'
                'ucIDInvBLNo' => $invoiceData->quote->cargos ? $invoiceData->quote->cargos->first()->bl_no : '',
                'ucIDInvVoyageNo' => $invoiceData->quote->voyage ? $invoiceData->quote->voyage->voyage_no : '',
                'ucIDInvVessel' => $invoiceData->vessel ? $invoiceData->vessel->name : '',
                'ucIDInvQty' => $invoiceData->quote->cargos ? $invoiceData->quote->cargos->sum('weight') : '',
                'ucIDInvConsignee' => $invoiceData->quote->consignee ? $invoiceData->quote->consignee->consignee_name : '',
                'ucIDInvClientRef' => '',
                'ucIDInvCargoType' => $invoiceData->quote->cargos ? $invoiceData->quote->cargos->first()->name : '',
                'ucIDInvCheckedBy' => $invoiceData->quote->checkedBy ? $invoiceData->quote->checkedBy->name : ''


    ]
        );
        $invumID = InvNum::orderBy('AutoIndex','DESC')->first()->AutoIndex;
         self::makeInvoiceLines($invoiceData->quote->services, $invumID);



        return true;
    }

    private function makeInvoiceLines($services, $invumid)
    {
        foreach ($services as $key => $service){
               BtnLine::create([
//            '_btblInvoiceLines_Checksum',
//            '_btblInvoiceLines_dCreatedDate',
//            '_btblInvoiceLines_dModifiedDate',
//            '_btblInvoiceLines_iBranchID',
//            '_btblInvoiceLines_iChangeSetID',
//            '_btblInvoiceLines_iCreatedAgentID',
//            '_btblInvoiceLines_iCreatedBranchID',
//            '_btblInvoiceLines_iModifiedAgentID',
//            '_btblInvoiceLines_iModifiedBranchID',
                'bChargeCom' => 1,
//            'bIsLotItem',
//            'bIsSerialItem',
//            'bIsWhseItem',
//            'bPromotionApplied',
                'cDescription' => $service->description,
//            'cLineNotes',
//            'cLotNumber',
//            'cPromotionCode',
//            'cTradeinItem',
                'dDeliveryDate' => Carbon::now(),
//            'dLotExpiryDate',
//            'fAddCost',
//            'fAddCostForeign',
//            'fHeight',
//            'fLength',
//            'fLineDiscount',
//            'fPromotionPriceExcl',
//            'fPromotionPriceIncl',
                'fQtyChange' => (is_numeric($service->grt_loa) ? $service->grt_loa : 1),
//            'fQtyChangeLineTaxAmount',
//            'fQtyChangeLineTaxAmountForeign',
//            'fQtyChangeLineTaxAmountNoDisc',
//            'fQtyChangeLineTaxAmountNoDiscForeign',
//            'fQtyChangeLineTotExcl',
//            'fQtyChangeLineTotExclForeign',
//            'fQtyChangeLineTotExclNoDisc',
//            'fQtyChangeLineTotExclNoDiscForeign',
//            'fQtyChangeLineTotIncl',
//            'fQtyChangeLineTotInclForeign',
//            'fQtyChangeLineTotInclNoDisc',
//            'fQtyChangeLineTotInclNoDiscForeign',
//            'fQtyChangeUR',
                'fQtyDeliver'=>(is_numeric($service->grt_loa) ? $service->grt_loa : 1) ,
                'fQtyDeliverUR'=>(is_numeric($service->grt_loa) ? $service->grt_loa : 1),
                'fQtyForDelivery' => (is_numeric($service->grt_loa) ? $service->grt_loa : 1),
                'fQtyForDeliveryUR' => (is_numeric($service->grt_loa) ? $service->grt_loa : 1),
                //qty
                'fQtyLastProcess' => (is_numeric($service->grt_loa) ? $service->grt_loa : 1),
                'fQtyLastProcessLineTaxAmount' => 0,
                'fQtyLastProcessLineTaxAmountForeign'=>0,
                'fQtyLastProcessLineTaxAmountNoDisc' => 0,
                'fQtyLastProcessLineTaxAmountNoDiscForeign'=>0,
                'fQtyLastProcessLineTotExcl' => (($service->agency_sp * $service->units) * (is_numeric($service->grt_loa) ? $service->grt_loa : 1)),
                'fQtyLastProcessLineTotExclForeign' =>(($service->agency_sp * $service->units) * (is_numeric($service->grt_loa) ? $service->grt_loa : 1)),
                'fQtyLastProcessLineTotExclNoDisc' => (($service->agency_sp * $service->units) * (is_numeric($service->grt_loa) ? $service->grt_loa : 1)),
                'fQtyLastProcessLineTotExclNoDiscForeign' => (($service->agency_sp * $service->units) * (is_numeric($service->grt_loa) ? $service->grt_loa : 1)),
                'fQtyLastProcessLineTotIncl' => (($service->agency_sp * $service->units) * (is_numeric($service->grt_loa) ? $service->grt_loa : 1)) + 0,
                'fQtyLastProcessLineTotInclForeign' => (($service->agency_sp * $service->units) * (is_numeric($service->grt_loa) ? $service->grt_loa : 1)) + 0,
                'fQtyLastProcessLineTotInclNoDisc' => (($service->agency_sp * $service->units) * (is_numeric($service->grt_loa) ? $service->grt_loa : 1)) + 0,
                'fQtyLastProcessLineTotInclNoDiscForeign' => (($service->agency_sp * $service->units) * (is_numeric($service->grt_loa) ? $service->grt_loa : 1)) + 0,
                'fQtyLastProcessUR' => (is_numeric($service->grt_loa) ? $service->grt_loa : 1),
                'fQtyLinkedUsed' => (is_numeric($service->grt_loa) ? $service->grt_loa : 1),
                'fQtyLinkedUsedUR' => (is_numeric($service->grt_loa) ? $service->grt_loa : 1),
                //qty
                'fQtyProcessed' => (is_numeric($service->grt_loa) ? $service->grt_loa : 1),
                'fQtyProcessedLineTaxAmount' => 0,
                'fQtyProcessedLineTaxAmountForeign' => 0,
                'fQtyProcessedLineTaxAmountNoDisc' => 0,
                'fQtyProcessedLineTaxAmountNoDiscForeign' => 0,
                'fQtyProcessedLineTotExcl' => (($service->agency_sp * $service->units) * (is_numeric($service->grt_loa) ? $service->grt_loa : 1)),
                'fQtyProcessedLineTotExclForeign' => (($service->agency_sp * $service->units) * (is_numeric($service->grt_loa) ? $service->grt_loa : 1)),
                'fQtyProcessedLineTotExclNoDisc' => (($service->agency_sp * $service->units) * (is_numeric($service->grt_loa) ? $service->grt_loa : 1)),
                'fQtyProcessedLineTotExclNoDiscForeign' => (($service->agency_sp * $service->units) * (is_numeric($service->grt_loa) ? $service->grt_loa : 1)),
                'fQtyProcessedLineTotIncl' => (($service->agency_sp * $service->units) * (is_numeric($service->grt_loa) ? $service->grt_loa : 1)) + 0,
                'fQtyProcessedLineTotInclForeign' =>(($service->agency_sp * $service->units) * (is_numeric($service->grt_loa) ? $service->grt_loa : 1)) + 0 ,
                'fQtyProcessedLineTotInclNoDisc' => (($service->agency_sp * $service->units) * (is_numeric($service->grt_loa) ? $service->grt_loa : 1)) + 0,
                'fQtyProcessedLineTotInclNoDiscForeign' => (($service->agency_sp * $service->units) * (is_numeric($service->grt_loa) ? $service->grt_loa : 1)) + 0,
                'fQtyProcessedUR' => (is_numeric($service->grt_loa) ? $service->grt_loa : 1),
//            'fQtyReserved',
//            'fQtyReservedChange',
//            'fQtyReservedChangeUR',
//            'fQtyReservedUR',
                'fQtyToProcess' => (is_numeric($service->grt_loa) ? $service->grt_loa : 1),
                'fQtyToProcessLineTaxAmount' =>0,
                'fQtyToProcessLineTaxAmountForeign' => 0,
                'fQtyToProcessLineTaxAmountNoDisc' => 0,
                'fQtyToProcessLineTaxAmountNoDiscForeign' => 0,
                'fQtyToProcessLineTotExcl' => (($service->agency_sp * $service->units) * (is_numeric($service->grt_loa) ? $service->grt_loa : 1)),
                'fQtyToProcessLineTotExclForeign' => (($service->agency_sp * $service->units) * (is_numeric($service->grt_loa) ? $service->grt_loa : 1)),
                'fQtyToProcessLineTotExclNoDisc' => (($service->agency_sp * $service->units) * (is_numeric($service->grt_loa) ? $service->grt_loa : 1)),
                'fQtyToProcessLineTotExclNoDiscForeign' => (($service->agency_sp * $service->units) * (is_numeric($service->grt_loa) ? $service->grt_loa : 1)),
                'fQtyToProcessLineTotIncl' => (($service->agency_sp * $service->units) * (is_numeric($service->grt_loa) ? $service->grt_loa : 1)) + 0,
                'fQtyToProcessLineTotInclForeign' => (($service->agency_sp * $service->units) * (is_numeric($service->grt_loa) ? $service->grt_loa : 1)) + 0,
                'fQtyToProcessLineTotInclNoDisc' => (($service->agency_sp * $service->units) * (is_numeric($service->grt_loa) ? $service->grt_loa : 1)) + 0,
                'fQtyToProcessLineTotInclNoDiscForeign' => (($service->agency_sp * $service->units) * (is_numeric($service->grt_loa) ? $service->grt_loa : 1)) + 0,
                'fQtyToProcessUR' => (is_numeric($service->grt_loa) ? $service->grt_loa : 1),
                //quantity
                'fQuantity' => (is_numeric($service->grt_loa) ? $service->grt_loa : 1),
                'fQuantityLineTaxAmount' => 0,
                'fQuantityLineTaxAmountForeign' => 0,
                'fQuantityLineTaxAmountNoDisc' => 0,
                'fQuantityLineTaxAmountNoDiscForeign' => 0,
                'fQuantityLineTotExcl' => (($service->agency_sp * $service->units) * (is_numeric($service->grt_loa) ? $service->grt_loa : 1)),
                'fQuantityLineTotExclForeign' => (($service->agency_sp * $service->units) * (is_numeric($service->grt_loa) ? $service->grt_loa : 1)),
                'fQuantityLineTotExclNoDisc' => (($service->agency_sp * $service->units) * (is_numeric($service->grt_loa) ? $service->grt_loa : 1)),
                'fQuantityLineTotExclNoDiscForeign' => (($service->agency_sp * $service->units) * (is_numeric($service->grt_loa) ? $service->grt_loa : 1)),
                'fQuantityLineTotIncl' => ((($service->agency_sp * $service->units) * (is_numeric($service->grt_loa) ? $service->grt_loa : 1)) + 0),
                'fQuantityLineTotInclForeign' => (($service->agency_sp * $service->units) * (is_numeric($service->grt_loa) ? $service->grt_loa : 1)) + 0,
                'fQuantityLineTotInclNoDisc' => (($service->agency_sp * $service->units) * (is_numeric($service->grt_loa) ? $service->grt_loa : 1)) + 0,
                'fQuantityLineTotInclNoDiscForeign' => (($service->agency_sp * $service->units) * (is_numeric($service->grt_loa) ? $service->grt_loa : 1)) + 0,
                'fQuantityUR' => (is_numeric($service->grt_loa) ? $service->grt_loa : 1),
                'fTaxRate' => 0,
                'fUnitCost' =>($service->agency_sp * $service->units),
                'fUnitCostForeign' => ($service->agency_sp * $service->units),
                //price single
                'fUnitPriceExcl' => ($service->agency_sp * $service->units),
                'fUnitPriceExclForeign' => ($service->agency_sp * $service->units),
//            'fUnitPriceExclForeignOrig',
//            'fUnitPriceExclOrig',
                'fUnitPriceIncl' => (($service->agency_sp * $service->units) + 0),
                'fUnitPriceInclForeign' => ($service->agency_sp * $service->units) + 0,
//            'fUnitPriceInclForeignOrig',
//            'fUnitPriceInclOrig',
//            'fWidth',
//            'iDeliveryMethodID',
//            'iDeliveryStatus',
//            'iGrvLineID',
                'iInvoiceID' => $invumid,
//            'iJobID',
//            'iLedgerAccountID',
//            'iLineDiscountReasonID',
//            'iLineDocketMode',
                'iLineID' => 1,
                'iLineProjectID' => 1,
                'iLineRepID' => 1,
//            'iLinkedLineID',
//            'iLotID',
//            'iMFPID',
                'iModule' => 0,
//            'iOrigLineID',
//            'iPieces',
//            'iPiecesDeliver',
//            'iPiecesForDelivery',
//            'iPiecesLastProcess',
//            'iPiecesLinkedUsed',
//            'iPiecesProcessed',
//            'iPiecesReserved',
//            'iPiecesToProcess',
//            'iPriceListNameID' => ,
//            'iReturnReasonID',
//            'iSOLinkedPOLineID',
//            'iSalesWhseID',
                //item id
                'iStockCodeID' => $service->stk_id,
                'iTaxTypeID' => $service->tax_code,
//            'iUnitPriceOverrideReasonID',
//            'iUnitsOfMeasureCategoryID',
//            'iUnitsOfMeasureID',
//            'iUnitsOfMeasureStockingID',
//            'iWarehouseID',
            ]);

        }

        return true;
    }
}
